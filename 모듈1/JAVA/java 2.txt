자바에서 모든 숫자는 순서에 의해 비교됨
Nan : not a number : '순서가 없는' 숫자임. 여기에는 아무리 연산해도 NaN 이 나옴
Infinity : '순서를 알 수 없는' 숫자임. 역시 비교 불가능

논리연산자 : &&, ||, ^, !
비트연산자 : &, |, ^, ~, <<, >>, >>>

String strA = "a";
String strB = "a";
String strC = new String("b");
String strD = new String("b");
System.out.println(strA == strB); // true
System.out.println(strC == strD); // false
객체끼리 비교연산자(==)를 쓰는 것은 객체의 주소(레퍼런스 값)를 비교하는 것
문자열의 내용을 비교하려면 equals메소드 사용해야함

- 향상된 for 문
int ar[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
for (int value : ar) { //  ':' 문자의 왼쪽은 배열의 방하나의 타입 변수로 설정, 오른쪽은 배열명
	System.out.print(value + " ");
}

자바의 데이터타입 : 원시(primitive) 타입, 참조(reference) 타입
primitive : byte, short, char, int, long, float, double
reference : 배열, 열거, 클래스, 인터페이스

stream(정확히는 스트림 버퍼) : 스트림은 사실 일종의 버퍼라고 생각하면 됨
입력스트림 : 프로그램으로 데이터가 들어옴
출력스트림 : 프로그램 밖으로 데이터가 나감 
출력스트림은 2개
1. 정상적인 출력
2. 에러 출력
System.out.println() 에서 out은 PrintWriter 타입의 변수이다
즉 println()은 PrintWriter 클래스에 있는 멤버메소드이다
첫 글자가 대문자이면 클래스 이름 : 은근히 코드 읽은 데 도움이 됨

Scanner sc = new Scanner(System.in); // in 은 InputStream 타입의 변수
Scanner의 입력소스가 System.in이라면 Scanner를 닫으면 안됨.
왜냐하면 System.in 이 연결되어있으므로 System.in도 닫히면서 안의 버퍼안의 정보가 다 날아감

System.out.println("정상처리 메시지 출력");
System.err.println("에러 메시지 출력");
// 출력해보면 순서 계속 바뀌면서 출력됨. 즉 스트림이 다름
왜 이렇게 스트림을 다르게 해놓았지?
커널은 프로세스 감시도 함
이 때, 특정 프로세스가 에러메시지를 내고 종료하면 커널이 그걸 잡아서 저장함(로그)
이 때, 커널이 이게 에러메시지인지 정상처리메시지인지 구분해야하기 때문에 스트림을 다르게 해놓은것이다.

windows 에서 엔터는 new line + carriage return 이다!!!!!!
따라서 stream에서 엔터 읽어들일 때 유의해라

클래스 안에서 선언되는 변수는 (멤버)필드
지역변수는 하나의 메소드 안에서 선언되는 변수
primitive 타입(기본 자료형)이 아니면 무조건 레퍼런스형이다. 따라서 주소를 가진다
실제 생성된 객체는 인스턴스라고 한다
모든 객체는 속성(멤버필드)과 행위(멤버메소드)를 갖는다!!!

헷갈리지말아야 할것 : 
int[] a; 
// 여기서 a는 4바이트짜리 레퍼런스 변수이다.
// 실제 배열의 레퍼런스가 저장되어 있는 것.

자바에서 배열은 new를 쓰든 안쓰든 전부 힙에 생성됨. 그리고 자동으로 초기화가 진행됨
new로 생성할 때 배열을 초기화하고 싶으면
int[] ar = new int[]{1,2,3,4}; // 첨자에 숫자 넣으면 안됨
초기화가 필요없다면
int[] ar = new int[10];
물론 
int[] ar = {1,2,3,4};
이렇게 초기화해도 무방함

클래스에는 클래스멤버와 인스턴스멤버가 있음
클래스멤버 : 클래스를 통해서 사용되어짐 => 'static 멤버' 라고 함
인스턴스 멤버 : 만들어진 객체를 통해서 사용되어짐
Double d = Double.valueOf("3.14"); // valueOf 라는 메소드는 static 멤버
System.out.println(d.isNaN()); // isNaN 라는 메소드는 인스턴스 멤버

2차원 배열을 향상된 for문으로 출력 :
int[][] ar = new int[][] {{1,2,3}, {4,5}, {6,7,8,9}};
for (int[] tmp : ar) {
	for (int value : tmp) {
		System.out.print(value + " ");
	}
	System.out.println();
}

public class AppStart {
	void func() {} // 이렇게 그냥 선언이 되면 반드시 인스턴스를 통해서 접근해야함
	static void func_t() {}
	public static void main(String[] args) {
		func(); // error
		func_t(); // static 멤버는 static 메소드에서 호출 가능
		AppStart app = new AppStart();
		app.func(); // func() 는 인스턴스 멤버이다
	}
}
