* 함수 이해 하기
- 함수 선언문 : 함수 선언을 위한 구문
function name([param[, param[, ... param]]]) {
   statements
}
- 함수 표현식
다른 표현식의 일부가 될 수 있다.이름이 붙은(named)함수 표현식 (예 : 호출 스택에서 표현식 이름 사용하는경우) 또는 "익명"함수 표현식을 정의 할 수 있다. 함수 표현식은 선언이 되지 않은 상태에서 사용할 수 없기 때문에 함수를 사용하기 전에 코드에 함수코드가 존제해야 사용 할 수 있습니다.

* 유효범위(scope)
- dynamic scope : 함수가 호출된 곳의 context를 사용
  // JavaScript with Dynamic Scope
  function foo() {
    console.log(x);
  }

  function bar() {
    var x = 15;
    foo();
  }

  var x = 10;
  foo(); // 10
  bar(); // 15

- lexical scope(static scope) : 함수가 정의된 곳의 context를 사용
	block scope,function scope(js)

* function scope : function만이 자신의 scope를 가진다.
ex) js가 function scope를 사용하는 것을 간과했을 때 날 수 있는 오류코드
// JavaScript
function foo() { // foo 
  var x = 1;
  console.log(x); // 1
  if(true) {
    var x = 2;
    console.log(x); // 2
  }
  console.log(x); // 2
}
foo();
- JavaScript에서 새 Scope 생성?필요한 곳에 function을 추가하면 된다.
ex)
  function foo() {
    var x = 1;
    if (true) {
      (function () {
        var x = 2;
        console.log(x); // 2
      })();
    }
    console.log(x); // 1
  }
  foo();
예제와 같은 경우는 if block의 한정된 곳에서 한번만 실행 될 코드이므로 Immediately-Invoked Function Expression(IIFE)를 추가한다. IIFE는 만들어지자마자 바로 실행되며 동시에 새로운 scope를 가진다. 독립적인 scope를 가지므로 그 안에서 선언된 x는 foo function의 scope에 영향을 미치지 않는다.

* 클로저(기술) 이해하기
ex1)
function makeFunc() {
  var name = "Mozilla";
  function displayName() {
    alert(name);
  }
  return displayName;
}

var myFunc = makeFunc();
//myFunc변수에 displayName을 리턴함
//유효범위의 어휘적 환경을 유지
myFunc();
//리턴된 displayName 함수를 실행(name 변수에 접근)

ex2)
function makeAdder(x) {
  var y = 1;
  return function(z) {
    y = 100;
    return x + y + z;
  };
}

var add5 = makeAdder(5);
var add10 = makeAdder(10);

console.log(add5(2));  // 107 (x:5 + y:100 + z:2)
console.log(add10(2)); // 112 (x:10 + y:100 + z:2)

=> 클로저는 특정 데이터들이 존재하는 범위(데이터)와 특정함수를 연결하기 위한 기술

* 클로저를 이용하는 이유 : 클로저는 데이터(어휘적 환경)와 데이터를 조작하는 함수를 연관시켜주기 때문에(속성과 메서드를 연결하는 객체 지향의 효과를 낸다)

* 클로저의 사용 1
function makeSizer(size) {
  return function() {
    document.body.style.fontSize = size + 'px';
  };
}

var size12 = makeSizer(12);
var size14 = makeSizer(14);
var size16 = makeSizer(16);

document.getElementById('size-12').onclick = size12;
document.getElementById('size-14').onclick = size14;
document.getElementById('size-16').onclick = size16;
위의 예제 코드를 통해서 body태그의 폰트 사이즈를 바꿀 수 있다.

* 클로저의 사용 2 - 모듈 패턴(private method 흉내내기)
private method : 코드의 제한적인 접근만을 허용 -> 함수의 전역 네임 스페이스 관리에 효과적

ex)
var counter = (function() {
  var privateCounter = 0;
  function changeBy(val) {
    var privateCounter = 0;
    privateCounter += val;
  }
  return {
    increment: function() {
      changeBy(1);
    },
    decrement: function() {
      changeBy(-1);
    },
    value: function() {
      return privateCounter;
    }
  };   
})();

console.log(counter.value()); // logs 0
counter.increment();
counter.increment();
console.log(counter.value()); // logs 2
counter.decrement();
console.log(counter.value()); // logs 1

==> 
var makeCounter = function() {
  var privateCounter = 0;
  function changeBy(val) {
    privateCounter += val;
  }
  return {
    increment: function() {
      changeBy(1);
    },
    decrement: function() {
      changeBy(-1);
    },
    value: function() {
      return privateCounter;
    }
  }  
};

var counter1 = makeCounter();
var counter2 = makeCounter();
alert(counter1.value()); /* 0 */
counter1.increment();
counter1.increment();
alert(counter1.value()); /* 2 */
counter1.decrement();
alert(counter1.value()); /* 1 */
alert(counter2.value()); /* 0 */

해당 변수privateCounter를 var로 선언하고 사용했다면 원하는 결과를 얻지 못했을 것이다.
==> 효과 : 정보 은닉과 캡슐화같은 이점

* 클로저 스코프
- 지역 범위
- 외부 함수 범위
- 전역 범위
var e = 10; //전역
function sum(a){
  return function(b){
    return function(c){
      // 외부 함수 범위 (outer functions scope)
      return function(d){
        // 지역 범위 (local scope)
        return a + b + c + d + e;
      }
    }
  }
}

console.log(sum(1)(2)(3)(4)); // log 20

// 익명 함수 없이 작성할 수도 있다.

// 전역 범위 (global scope)
var e = 10;
function sum(a){
  return function sum2(b){
    return function sum3(c){
      // 외부 함수 범위 (outer functions scope)
      return function sum4(d){
        // 지역 범위 (local scope)
        return a + b + c + d + e;
      }
    }
  }
}

var s = sum(1);
/*
s=function sum2(b){
	return function sum3(c){
		return function sum4(d){
			return 1 + b + c + d + 10;
	    }
	}
}
 */
var s1 = s(2);
/*
s1=function sum3(c){
	return function sum4(d){
		return 1 + 2 + c + d + 10;
    }
}
 */
var s2 = s1(3);
/*
s1=function sum4(d){
		return 1 + 2 + 3 + d + 10;
	}
*/
var s3 = s2(4);//s3= 1+2+3+4+10
console.log(s3) //log 20

* Rest 파라미터와 arguments 객체 사이에 세 가지 주요 차이점이 있습니다:
- Rest 파라미터는 구분된 이름(예, 함수 표현에 정식으로 정의된 것)이 주어지지 않은 유일한 대상인 반면, arguments 객체는 함수로 전달된 모든 인수를 포함합니다.
- arguments 객체는 실제 배열이 아니고 rest 파라미터는 Array 인스턴스로, sort, map, forEach 또는 pop 같은 메서드가 바로 인스턴스에 적용될 수 있음을 뜻합니다.
-> arguments 객체는 자체에 특정 추가 기능이 있습니다 (callee 속성처럼).


* 함수 이름 != 함수가 할당 된 변수 
함수 이름 : 변경X 
함수가 할당 된 변수 : 다시 할당가능 함수 이름은 함수 본문(body)내에서만 사용할 수 있습니다. 함수 본문(body) 외부에서 사용하려고 하면 오류가 발생합니다. (함수 이름이 var 문을 통해 이전에 선언 된 경우에는 정의되지 않습(undefined)니다.

* 함수의 선언
var p = 5;
function myFunc() {
    var p = 9;

    function decl() {
        console.log(p); 
    }
    var expr = function() {
     	console.log(p); 
    };
    var cons = new Function('\tconsole.log(p);');

    decl(); //9
    expr(); //9
    cons(); //5
}
myFunc();

함수 표현식,함수 선언식에 의해 정의된 함수는 한번만 구분 분석됨(함수 호출시마다 매번 클로저를 만들어서 조금 느리더라도), 하지만 Function생성자에 의해 전달된 함수 몸통 문자열은 생성자가 호출될 때마다 파싱되어야함
따라서 속도가 상대적으로 느리다
