5.1 익명함수
- var 함수명 = function(){ //... }

5.2 선언적함수
- function 함수명 (){ //.... }
- 웹 브라우저는 script 태그 내부 내용을 읽기 전에 선언적함수부터 읽는다.
- 생성 순서 : 선언적 함수 -> 익명함수 ->> 따라서 같은 함수명을 쓸 경우 결과적으로 익명함수 내부만 실행된다.

5.3 매개변수와 리턴값
- ;

5.4 매개변수
- 함수의 인터페이스에서 정의한 수 보다 많은 매개변수를 사용할 경우 왼쪽부터 전달하며, 초과된 매개변수는 무시한다.
- 함수의 인터페이스에서 정의한 수 보다 적은 매개변수를 사용할 경우 왼쪽부터 전달하며, 부족한 수 만큼 undefined 를 전달한다.

5.5 가변인자함수
- 자바스크립트의 모든 함수는 기본적으로 내부에 arguments 변수가 있다.(arguments.length : 전달된 인자의 개수)

5.6 리턴 값
- ;

5.7 내부 함수
- 여러 사람이 작업할 시 함수명에 의한 충돌을 방지하게 위해 사용.(java의 namespace)
- 함수 내부에 함수를 두는 것. ( 함수 외부에서 사용 불가)
- 자기 호출 함수 : (function (){ //... })();
				      ^~~~ 자기 자신을 호출하는 함수 호출 연산자

5.8 콜백함수 *
- 매개변수로 전달하는 함수를 콜백함수라 한다. ( 함수를 매개변수로 전달할 시 함수명만 전달한다 )

5.9 함수를 리턴하는 함수
- return function(){ //... } ->> 클로저 때문에 사용한다.

5.10 클로저 *
- 느낌상 지역변수, 지역객체의 수명을 늘리는 역할을 하는 행위(?)
- 반환된 클로저 함수를 사용해야 지역변수의 수명을 늘릴 수 있다.

5.11 내장함수
	5.11.1 타이머 함수
	- 특정 시간에 특정 함수를 사용할 수 있게 하는 함수
	- setTimeout(function,millisecond) <-> clearTimeout(함수		  명) 
	  >> 일정 시간 후 함수 실행/중지
	- setInterval(function,milisecond) <-> clearInterval(함수		  명) 
	  >> 일정 시간마다 함 수 실행/중지

	5.11.2 인코딩. 디코딩 함수 *
	- encodeURIComponent() : 알파벳과 숫자를 제외한 모든 문자를 인코딩
	  ( 이 외 비슷한 기능의 함수들은 잘 사용하지 않는다.)

	5.11.3 코드 실행 함수 *
	- eval() : string 을 자바스크립트 코드로 실행.
	
	5.11.4 숫자 확인함수
	- isFinite() / isNaN() ( -infinity 도 존재한다. )

	5.11.5 숫자 변환 함수
	- parseInt() / parseFloat()
	  Number 함수의 단점을 보완하기 위해 사용 ( 문자가 껴있어도 최대한 읽어	  서 변환한다)
	  --> 왼쪽부터 읽으므로 처음에 문자가 있을경우 ( $1000 ) 변환 할 수 		  없다.
	  -->> 0 으로 시작시 8진수로 인식, 0x 는 16진수로 인식한다.
	  -->>> e 는 자릿수로 인식한다. 

5.12 조금 더 나아가기
** 메모리 정리 
- 자바 스크립트는 싱글 스레드 동작 -> 실행순서를 기록하는 스택이 하나만 존재한다.
- 자바 스크립트는 크게 Stack(메서드 호출)/ Heap(객체생성)/ Event Queue(이벤트 발생 시 콜백함수 대기시키는 메모리, 비동기 api (브라우저) )
- 비동기 처리를 위해 브라우저가 작업을 한다. (SetTimeout 의 시간측정과 같은 비동기 작업)
- 작업의 우선순위는 Stack >>>>>>>>>>>>>> Event Queue, 즉 스택이 비어야 E_Q 처리가능
- 모든 실행에 대해서는 Stack 에 쌓아두고 이것이 멈추면 Stack Overflow 가 일어나나는 것이다.
	5.12.1 실행 순서
	- 	;
## Promise
- 비동기 처리를 위한 객체
- 함수 내부 리턴값으로 주로 이용한다 ( 함수를 반환하는 것 처럼 )
- 상태는 Pending(대기) / Fulfilled(이행/완료) / rejected(실패)
- new Promise() -> promise 객체선언 : 대기상태 ->> 인자로 function(resolve,reject){} 콜백 함수를 보내준다
- new Promise(function(resolve,reject){ resolve(); } 는 이행상태이다. (resolve 실행)
- 함수명().then(function(resolvedata){ console.log(resolvedata) }
  -> ajax의 success 와 비슷하다.
- 햄수명().then().catch(function(err){ console.log(err) }
활용 ) 함수명.().then(function(data){
	console.log(data);
}).catch(function(err){console.err(err);});

-체이닝 가능
-- 예시로 회원 로그인 이 있다. (userInfo).then(parseValue).then(auth).then(diaplay)
- 예외 처리는 catch를 이용한다.
